require 'spec_helper'
require "devise/test_helpers"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PotluckItemsController do

  # This should return the minimal set of attributes required to create a valid
  # PotluckItem. As you add validations to PotluckItem, be sure to
  # update the return value of this method accordingly.

#  def valid_attributes
#    { :event_id => @event.id, :category => "Beer", :dishes => ["IPA","Pale Ale"], :host_quantity => 1 }
#  end

	def login_for_user(user)
		@request.env["devise.mapping"] = Devise.mappings[:user]
		sign_in user
	end

	describe "Unauthorized handling" do
		before(:all) do
			User.destroy_all
			Event.destroy_all
			
			@event = FactoryGirl.create(:event)
			@bob = FactoryGirl.create(:bob)
			@attendee = Attendee.create(:event_id => @event.id, :user_id => @bob.id, :rsvp => "Going", :email => @bob.email)
			Role.create(:user_id => @bob.id, :event_id => @event.id, :privilege => "guest")
		end

		it "should allow guests to access potluck items landing page" do

			login_for_user(@bob)
			get 'index', :event_id => @event.id
			response.status.should == 200
		end

		it "should not allow guests to create, edit or delete potluck items" do
			login_for_user(@bob)
			get 'new', :event_id => @event.id
			response.status.should == 422
		end

		it "should not allow people not associated to the event to view potluck items" do
			other_event = FactoryGirl.create(:event_secondary)
			other_user = other_event.user
			login_for_user(other_user)
			get 'index', :event_id => @event.id
			response.status.should == 401
		end
	end
end
